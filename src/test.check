#include <stdio.h>
#include <string.h>

#include "s21_string.h"
#include <locale.h>



//checkmk clean_mode=1 test.check >test.c

#test memchr_test
char *str1 = "\0";
char char1 = 'x';
char *str2 = "privet mir";
char char2 = '\0';
char char3 = 'i';
ck_assert_ptr_eq(s21_memchr(str1, char1, 1), memchr(str1, char1, 1));
ck_assert_ptr_eq(s21_memchr(str2, char2, 10), memchr(str2, char2, 10));
ck_assert_ptr_eq(s21_memchr(str2, char3, 10), memchr(str2, char3, 10));
ck_assert_ptr_eq(s21_memchr(str2, char3, 8), memchr(str2, char3, 8));
ck_assert_ptr_eq(s21_memchr(str2, char3, 2), memchr(str2, char3, 2));
ck_assert_ptr_eq(s21_memchr(str2, char1, 10), memchr(str2, char1, 10));
ck_assert_ptr_eq(s21_memchr(str2, char1, 11), memchr(str2, char1, 11));
int arr[] = {0, 588, 9797, 656, 53};
ck_assert_ptr_eq(s21_memchr(arr, 6, sizeof(int) * 5), memchr(arr, 6, sizeof(int) * 5));
//ck_assert_ptr_eq(s21_memchr(arr, 6, sizeof(int) * 8), memchr(arr, 6, sizeof(int) * 8));
ck_assert_ptr_eq(s21_memchr(arr, 6, sizeof(int) * 1), memchr(arr, 6, sizeof(int) * 1));

#test memcmp_test
char *str1 = "privet vsem school-21";
char *str2 = "privet vsem school-21";
char *str3 = "privet vsem iz Moskvy";
char *str4 = "\0";
int res1=s21_memcmp(str1, str2, 33);
int res2=memcmp(str1, str2, 22);
if (res1>1) res1=1;
if (res2>1) res2=1;
if (res1<-1) res1=-1;
if (res2<-1) res2=-1;
ck_assert_int_eq(res1, res2);

res1=s21_memcmp(str1, str3, 14);
res2=memcmp(str1, str3, 14);
if (res1>1) res1=1;
if (res2>1) res2=1;
if (res1<-1) res1=-1;
if (res2<-1) res2=-1;
ck_assert_int_eq(res1, res2);

res1=s21_memcmp(str1, str3, 5);
res2=memcmp(str1, str3, 5);
if (res1>1) res1=1;
if (res2>1) res2=1;
if (res1<-1) res1=-1;
if (res2<-1) res2=-1;
ck_assert_int_eq(res1, res2);

res1=s21_memcmp(str1, str4, 2);
res2=memcmp(str1, str4, 2);
if (res1>1) res1=1;
if (res2>1) res2=1;
if (res1<-1) res1=-1;
if (res2<-1) res2=-1;
ck_assert_int_eq(res1, res2);

int arr1[] = {0, 588, 9797, 656, 53};
int arr2[] = {0, 588, 9755, 7, 5};

res1=s21_memcmp(arr1, arr2, sizeof(int) * 5);
res2=memcmp(arr1, arr2, sizeof(int) * 5);
if (res1>1) res1=1;
if (res2>1) res2=1;
if (res1<-1) res1=-1;
if (res2<-1) res2=-1;
ck_assert_int_eq(res1, res2);

res1=s21_memcmp(arr1, arr2, sizeof(int) * 1);
res2=memcmp(arr1, arr2, sizeof(int) * 1);
if (res1>1) res1=1;
if (res2>1) res2=1;
if (res1<-1) res1=-1;
if (res2<-1) res2=-1;
ck_assert_int_eq(res1, res2);

#test memcpy_test
char str1[150];
char str2[150];
char *str3 = "privet vsem school-21";
char *str4 = "\0";
int arr[] = {0, 588, 9797, 656, 53};
ck_assert_str_eq(s21_memcpy(str1, str3, 22), memcpy(str2, str3, 22));
ck_assert_str_eq(s21_memcpy(str1, str3, 3), memcpy(str2, str3, 3));
ck_assert_str_eq(s21_memcpy(str1, str4, 2), memcpy(str2, str4, 2));
ck_assert_str_eq(s21_memcpy(str1, str4, 1), memcpy(str2, str4, 1));
ck_assert_str_eq(s21_memcpy(str1, arr, 13), memcpy(str2, arr, 13));
ck_assert_str_eq(s21_memcpy(str1, str4, 0), memcpy(str2, str4, 0));
ck_assert_str_eq(s21_memcpy(str1, str4, 2), memcpy(str2, str4, 2));

#test strncat_test
char str1[30] = "hello vsem";
char str1_s[21] = "hello vsem";
char str2[5] = " ";
char str3[20] = " i dosvidos";
char str4[1] = "";
ck_assert_str_eq(s21_strncat(str1_s, str2, 5),strncat(str1, str2, 5));
ck_assert_str_eq(s21_strncat(str1_s, str2, 1),strncat(str1, str2, 1));
ck_assert_str_eq(s21_strncat(str1_s, str2, 8),strncat(str1, str2, 8));
ck_assert_str_eq(s21_strncat(str1_s, str3, 3),strncat(str1, str3, 3));
//ck_assert_str_eq(s21_strncat(str1_s, str3, 20),strncat(str1, str3, 20));
ck_assert_str_eq(s21_strncat(str1_s, str4, 2),strncat(str1, str4, 2));
ck_assert_str_eq(s21_strncat(str1_s, str4, 1),strncat(str1, str4, 1));

#test strncmp_test
char *str1 = "Privet mir";
char *str2 = "Privet mir vsem";
char *str3= "";
int res1=s21_strncmp(str1, str2, 50);
int res2=strncmp(str1, str2, 50);
if (res1>1) res1=1;
if (res2>1) res2=1;
if (res1<-1) res1=-1;
if (res2<-1) res2=-1;
ck_assert_int_eq(res1, res2);

res1=s21_strncmp(str1, str2, 9);
res2=strncmp(str1, str2, 9);
if (res1>1) res1=1;
if (res2>1) res2=1;
if (res1<-1) res1=-1;
if (res2<-1) res2=-1;
ck_assert_int_eq(res1, res2);

res1=s21_strncmp(str1, str3, 2);
res2=strncmp(str1, str3, 2);
if (res1>1) res1=1;
if (res2>1) res2=1;
if (res1<-1) res1=-1;
if (res2<-1) res2=-1;
ck_assert_int_eq(res1, res2);

res1=s21_strncmp(str3, str3, 2);
res2=strncmp(str3, str3, 2);
if (res1>1) res1=1;
if (res2>1) res2=1;
if (res1<-1) res1=-1;
if (res2<-1) res2=-1;
ck_assert_int_eq(res1, res2);

#test strcspn_test
char src1[] = "";
char res1[] = "";
ck_assert_int_eq(s21_strcspn(res1, src1), strcspn(res1, src1));

char src2[] = "privet";
char res2[] = "";
ck_assert_int_eq(s21_strcspn(res2, src2), strcspn(res2, src2));

char src3[] = "";
char res3[] = "privet";
ck_assert_int_eq(s21_strcspn(res3, src3), strcspn(res3, src3));

char src4[] = "privet";
char res4[] = "prIvet";
ck_assert_int_eq(s21_strcspn(res4, src4), strcspn(res4, src4));

char src5[] = "666";
char res5[] = "666";
ck_assert_int_eq(s21_strcspn(res5, src5), strcspn(res5, src5));

char src6[] = "12345";
char res6[] = "123";
ck_assert_int_eq(s21_strcspn(res6, src6), strcspn(res6, src6));

char src7[] = "123";
char res7[] = "12345";
ck_assert_int_eq(s21_strcspn(res7, src7), strcspn(res7, src7));

char src8[] = "1234567890";
char res8[] = "0987654321";
ck_assert_int_eq(s21_strcspn(res8, src8), strcspn(res8, src8));

char src9[] = "5g6g8h3j7k8l9";
char res9[] = "123";
ck_assert_int_eq(s21_strcspn(res9, src9), strcspn(res9, src9));

char src10[] = "g1ggg23gg781235";
char res10[] = "123";
ck_assert_int_eq(s21_strcspn(res10, src10), strcspn(res10, src10));

char src11[] = "gkht";
char res11[] = "gh";
ck_assert_int_eq(s21_strcspn(res11, src11), strcspn(res11, src11));

char src12[] = "349854985fgfgkjjkg{}gfggfFG%&&%GGF";
char res12[] = "0987654321";
ck_assert_int_eq(s21_strcspn(res12, src12), strcspn(res12, src12));

char src13[] = "\0";
char res13[] = "ffh";
ck_assert_int_eq(s21_strcspn(res13, src13), strcspn(res13, src13));

char src14[] = "66yutyh";
char res14[] = "\0";
ck_assert_int_eq(s21_strcspn(res14, src14), strcspn(res14, src14));

char src15[] = "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
char res15[] = "444444444444444444444444444444444444444444444444444444444444444444444444444444444444444441";
ck_assert_int_eq(s21_strcspn(res15, src15), strcspn(res15, src15));

#test strlen_test
char *str1 = "Hello world\0";
char *str2 = "Hello world\n\0";
char *str3 = "a\n\0";
char *str4 = " \n\0";
char *str5 = " \0";
char *str6 = "\n\0";
char *str7 = "\0";
ck_assert_int_eq(strlen(str1), s21_strlen(str1));
ck_assert_int_eq(strlen(str2), s21_strlen(str2));
ck_assert_int_eq(strlen(str3), s21_strlen(str3));
ck_assert_int_eq(strlen(str4), s21_strlen(str4));
ck_assert_int_eq(strlen(str5), s21_strlen(str5));
ck_assert_int_eq(strlen(str6), s21_strlen(str6));
ck_assert_int_eq(strlen(str7), s21_strlen(str7));

#test strrchr_test
char str1[] = "";
char str2 = '\0';
ck_assert_pstr_eq(s21_strrchr(str1, str2),  strrchr(str1, str2));

char str3[] = "privet";
char str4 = '\0';
ck_assert_pstr_eq(s21_strrchr(str3, str4), strrchr(str3, str4));

char str5[] = "";
char str6 = 'p';
ck_assert_pstr_eq(s21_strrchr(str5, str6), strrchr(str5, str6));

char str7[] = "privet vsem";
char str8 = 'e';
ck_assert_pstr_eq(s21_strrchr(str7, str8), strrchr(str7, str8));

char str9[] = "mama ela rama";
char str10 = 'a';
ck_assert_pstr_eq(s21_strrchr(str9, str10), strrchr(str9, str10));

char str11[] = "mama ema memem";
char str12 = 'm';
ck_assert_pstr_eq(s21_strrchr(str11, str12), strrchr(str11, str12));

char str13[] = "tttttTTTTttttTtt";
char str14 = 'T';
ck_assert_pstr_eq(s21_strrchr(str13, str14), strrchr(str13, str14));

char str15[] = "123456789";
char str16 = '0';
ck_assert_pstr_eq(s21_strrchr(str15, str16), strrchr(str15, str16));

#test strtok_test
char str1[] = "13246549";
char del1[] = "8";
char *tok1 = s21_strtok(str1, del1);
char *tok2 =  strtok(str1, del1);
ck_assert_pstr_eq(tok1, tok2);
while (tok1 && tok2){
tok1 = s21_strtok(s21_NULL, del1);
tok2 =  strtok(NULL, del1);
ck_assert_pstr_eq(tok1, tok2);
}

char str2[] = "Privet mir!";
char str22[] = "Privet mir!";
char del2[] = "v";
tok1 = s21_strtok(str2, del2);
tok2 =  strtok(str22, del2);
ck_assert_pstr_eq(tok1, tok2);
while (tok1 && tok2){
tok1 = s21_strtok(s21_NULL, del2);
tok2 =  strtok(NULL, del2);
ck_assert_pstr_eq(tok1, tok2);
}

char str3[] = "Privet mir!";
char str33[] = "Privet mir!";
char del3[] = "\0";
tok1 = s21_strtok(str3, del3);
tok2 =  strtok(str33, del3);
ck_assert_pstr_eq(tok1, tok2);
while (tok1 && tok2){
tok1 = s21_strtok(s21_NULL, del3);
tok2 =  strtok(NULL, del3);
ck_assert_pstr_eq(tok1, tok2);
}

char str4[] = "i";
char str44[] = "i";
char del4[] = "Privet";
tok1 = s21_strtok(str4, del4);
tok2 =  strtok(str44, del4);
ck_assert_pstr_eq(tok1, tok2);


char str5[] = "";
char str55[] = "";
char del5[] = "Privet";
tok1 = s21_strtok(str5, del5);
tok2 =  strtok(str55, del5);
ck_assert_pstr_eq(tok1, tok2);


char str6[] = "";
char str66[] = "";
char del6[] = "";
tok1 = s21_strtok(str6, del6);
tok2 =  strtok(str66, del6);
ck_assert_pstr_eq(tok1, tok2);


char str7[] = "3687423213328";
char str77[] = "3687423213328";
char del7[] = "1";
tok1 = s21_strtok(str7, del7);
tok2 =  strtok(str77, del7);
ck_assert_pstr_eq(tok1, tok2);
while (tok1 && tok2){
tok1 = s21_strtok(s21_NULL, del7);
tok2 =  strtok(NULL, del7);
ck_assert_pstr_eq(tok1, tok2);
}

char str8[] = "3687423333213328";
char str88[] = "3687423333213328";
char del8[] = "3";
tok1 = s21_strtok(str8, del8);
tok2 =  strtok(str88, del8);
ck_assert_pstr_eq(tok1, tok2);
while (tok1 && tok2){
tok1 = s21_strtok(s21_NULL, del8);
tok2 =  strtok(NULL, del8);
ck_assert_pstr_eq(tok1, tok2);
}

#test memset_test

char str1[] = "Privet mir!";
char str11[] = "Privet mir!";
char c = 'v';
s21_memset(str1, c, sizeof(char) * 5);
memset(str11, c, sizeof(char) * 5);
ck_assert_pstr_eq(str1, str11);

char str2[] = "Privet mir!";
char str22[] = "Privet mir!";
c = 68;
s21_memset(str2, c, sizeof(char) * 2);
memset(str22, c, sizeof(char) * 2);
ck_assert_pstr_eq(str2, str22);

char str3[] = "Privet mir!";
char str33[] = "Privet mir!";
c = 68;
s21_memset(str3, c, sizeof(char) * s21_strlen(str3));
memset(str33, c, sizeof(char) * strlen(str33));
ck_assert_pstr_eq(str3, str33);

int arr1[] = {255, 0, 13, 45};
int arr11[] = {255, 0, 13, 45};
c = 'a';
s21_memset(arr1, c, sizeof(int) *2);
memset(arr11, c, sizeof(int) * 2);
for(int i = 0; i < 4; i++)
ck_assert_int_eq(arr1[i], arr11[i]);

int arr2[] = {255, 0, 13, 45};
int arr22[] = {255, 0, 13, 45};
c = 'a';
s21_memset(arr2, c, sizeof(int) * 0);
memset(arr22, c, sizeof(int) * 0);
for(int i = 0; i < 4; i++)
ck_assert_int_eq(arr2[i], arr22[i]);

#test strchr_test
char str1[] = "";
char str2 = '\0';
ck_assert_pstr_eq(s21_strchr(str1, str2),  strchr(str1, str2));

char str3[] = "privet";
char str4 = '\0';
ck_assert_pstr_eq(s21_strchr(str3, str4), strchr(str3, str4));

char str5[] = "";
char str6 = 'p';
ck_assert_pstr_eq(s21_strchr(str5, str6), strchr(str5, str6));

char str7[] = "privet vsem";
char str8 = 'e';
ck_assert_pstr_eq(s21_strchr(str7, str8), strchr(str7, str8));

char str9[] = "mama ela rama";
char str10 = 'a';
ck_assert_pstr_eq(s21_strchr(str9, str10), strchr(str9, str10));

char str11[] = "mama ema memem";
char str12 = 'm';
ck_assert_pstr_eq(s21_strchr(str11, str12), strchr(str11, str12));

char str13[] = "tttttTTTTttttTtt";
char str14 = 'T';
ck_assert_pstr_eq(s21_strchr(str13, str14), strchr(str13, str14));

char str15[] = "123456789";
char str16 = '0';
ck_assert_pstr_eq(s21_strchr(str15, str16), strchr(str15, str16));

#test strerror_test

for(int i = -1; i < 150; i++)
ck_assert_pstr_eq(s21_strerror(i), strerror(i));

#test strpbrk_test

char str1[] = "Hello world";
char f1[] = "l";
ck_assert_pstr_eq(s21_strpbrk(str1, f1), strpbrk(str1, f1));

char str2[] = "Hello world";
char f2[] = "s";
ck_assert_pstr_eq(s21_strpbrk(str2, f2), strpbrk(str2, f2));

char str3[] = "";
char f3[] = "s";
ck_assert_pstr_eq(s21_strpbrk(str3, f3), strpbrk(str3, f3));

char str4[] = "\0";
char f4[] = "s";
ck_assert_pstr_eq(s21_strpbrk(str4, f4), strpbrk(str4, f4));

char str5[] = "Hello world";
char f5[] = "\0";
ck_assert_pstr_eq(s21_strpbrk(str5, f5), strpbrk(str5, f5));

char str6[] = "Hello world";
char f6[] = "lrow";
ck_assert_pstr_eq(s21_strpbrk(str6, f6), strpbrk(str6, f6));

#test strstr_test

char str1[] = "Hello world someone";
char f1[] = "ld";
ck_assert_pstr_eq(s21_strstr(str1, f1), strstr(str1, f1));

char str2[] = "Hello world someone";
char f2[] = "Hello";
ck_assert_pstr_eq(s21_strstr(str2, f2), strstr(str2, f2));

char str3[] = "Hello world someone";
char f3[] = "hello";
ck_assert_pstr_eq(s21_strstr(str3, f3), strstr(str3, f3));

char str4[] = "Hello world someone";
char f4[] = "";
ck_assert_pstr_eq(s21_strstr(str4, f4), strstr(str4, f4));
ck_assert_pstr_eq(s21_strstr(f4, str4), strstr(f4, str4));

char str5[] = "Hello world someone";
char f5[] = "\0";
ck_assert_pstr_eq(s21_strstr(str5, f5), strstr(str5, f5));
ck_assert_pstr_eq(s21_strstr(f5, str5), strstr(f5, str5));
ck_assert_pstr_eq(s21_strstr(str5, str5), strstr(str5, str5));

#test s21_to_upper_test

char str1[] = "abcdefghijklmnopqrstuvwxyz123";
void* res=s21_to_upper(str1);
ck_assert_pstr_eq(res, "ABCDEFGHIJKLMNOPQRSTUVWXYZ123");
free(res);

char str2[] = "";
res=s21_to_upper(str2);
ck_assert_pstr_eq(res, "");
free(res);

char str3[] = "\0";
res=s21_to_upper(str3);
ck_assert_pstr_eq(res, "");
free(res);

char str4[] = "123567890";
res=s21_to_upper(str4);
ck_assert_pstr_eq(res, "123567890");
free(res);

char str5[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ{}";
res=s21_to_upper(str5);
ck_assert_pstr_eq(res, "ABCDEFGHIJKLMNOPQRSTUVWXYZ{}");
free(res);

char *str6 = s21_NULL;
res=s21_to_upper(str6);
ck_assert_pstr_eq(res, NULL);
free(res);

#test s21_to_lower_test

char str1[] = "abcdefghijklmnopqrstuvwxyz123";
void* res=s21_to_lower(str1);
ck_assert_pstr_eq(res, "abcdefghijklmnopqrstuvwxyz123");
free(res);

char str2[] = "";
res=s21_to_lower(str2);
ck_assert_pstr_eq(res, "");
free(res);

char str3[] = "\0";
res=s21_to_lower(str3);
ck_assert_pstr_eq(res, "");
free(res);

char str4[] = "123567890";
res=s21_to_lower(str4);
ck_assert_pstr_eq(res, "123567890");
free(res);

char str5[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ{}";
res=s21_to_lower(str5);
ck_assert_pstr_eq(res, "abcdefghijklmnopqrstuvwxyz{}");
free(res);

char *str6 = s21_NULL;
res=s21_to_lower(str6);
ck_assert_pstr_eq(res, NULL);
free(res);


#test trim_test

char str1[] = "Hello world";
char tr1[] = "Held";
void* res=s21_trim(str1, tr1);
ck_assert_pstr_eq(res, "o wor");
free(res);

char str2[] = "Hello world";
char tr2[] = "wor";
res=s21_trim(str2, tr2);
ck_assert_pstr_eq(res, "Hello world");
free(res);

char str3[] = "\0";
char tr3[] = "wor";
res=s21_trim(str3, tr3);
ck_assert_pstr_eq(res, "");
free(res);
res=s21_trim(tr3, str3);
ck_assert_pstr_eq(res, "wor");
free(res);

char *str4 = s21_NULL;
char tr4[] = "wor";
res=s21_trim(str4, tr4);
ck_assert_pstr_eq(res, NULL);
free(res);
res=s21_trim(tr4, str4);
ck_assert_pstr_eq(res, NULL);
free(res);


#test insert_test

char str1[] = "Hello world";
char tr1[] = "Held";
void *res=s21_insert(str1, tr1, 5);
ck_assert_pstr_eq(res, "HelloHeld world");
free(res);

char str2[] = "";
char tr2[] = "Hello";
res=s21_insert(str2, tr2, 0);
ck_assert_pstr_eq(res, "Hello");
free(res);

char str3[] = "Hell0";
char tr3[] = " world";
res=s21_insert(str3, tr3, 5);
ck_assert_pstr_eq(res, "Hell0 world");
free(res);
res=s21_insert(str3, tr3, 6);
ck_assert_pstr_eq(res, NULL);
free(res);

char *str4 = s21_NULL;
char tr4[] = "wor";
res=s21_insert(str4, tr4, 0);
ck_assert_pstr_eq(res, NULL);
free(res);
res=s21_insert(tr4, str4, 0);
ck_assert_pstr_eq(res, NULL);
free(res);

#test sprintf_test1
  char str1[100];
  char str2[100];
  char *format = "%c Test %c Test %c Test %c Test %c";
  int a = 9;
  int b = 10;
  int c = 17;
  int d = 66;
  int e = 124;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d, e), sprintf(str2, format, a, b, c, d, e));
  ck_assert_pstr_eq(str1, str2);

#test sprintf_test2
  char str1[100];
  char str2[100];
  char *format = "%d Test %d Test %d Test %d Test %d";
  int a = 9;
  int b = 10;
  int c = 17;
  int d = 66;
  int e = 124;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d, e), sprintf(str2, format, a, b, c, d, e));
  ck_assert_pstr_eq(str1, str2);

  #test sprintf_test3
  char str1[100];
  char str2[100];
  char *format = "%c Test %c Test %c Test %c Test %c";
  int a = -56;
  int b = -47;
  int c = -16;
  int d = -98;
  int e = -56;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d, e), sprintf(str2, format, a, b, c, d, e));
  ck_assert_pstr_eq(str1, str2);

 #test sprintf_test4
  char str1[100];
  char str2[100];
  char *format = "%d Test %d Test %d Test %d Test %d";
  int a = -56;
  int b = -47;
  int c = -16;
  int d = -98;
  int e = -56;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d, e), sprintf(str2, format, a, b, c, d, e));
  ck_assert_pstr_eq(str1, str2);

  #test sprintf_test5
  char str1[100];
  char str2[100];
  char *format = "%dTest%dTest%dTest%dTest%d";
  int a = -56;
  int b = -47;
  int c = -16;
  int d = -98;
  int e = -56;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d, e), sprintf(str2, format, a, b, c, d, e));
  ck_assert_pstr_eq(str1, str2);

  #test sprintf_test6
  char str1[100];
  char str2[100];
  char *format = "%2dTest%1dTest%4dTest%dTest%d";
  int a = -56;
  int b = -47;
  int c = -143436;
  int d = -98;
  int e = -56;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d, e), sprintf(str2, format, a, b, c, d, e));
  ck_assert_pstr_eq(str1, str2);

  #test sprintf_test7
  char str1[100];
  char str2[100];
  char *format = "%-2dTest%+1dTest%-4dTest%dTest%d";
  int a = -56;
  int b = -47;
  int c = -143436;
  int d = -98;
  int e = -56;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d, e), sprintf(str2, format, a, b, c, d, e));
  ck_assert_pstr_eq(str1, str2);

  #test sprintf_test8
  char str1[100];
  char str2[100];
  char *format = "%10d Test %3d Test %-d Test %d Test %-d";
  int a = -56;
  int b = -47;
  int c = -143436;
  int d = -98;
  int e = -56;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d, e), sprintf(str2, format, a, b, c, d, e));
  ck_assert_pstr_eq(str1, str2);
  
  #test sprintf_test9
  char str1[100];
  char str2[100];
  char *format = "%+10d Test %+3d Test %-5d Test %-8d Test %-d";
  int a = 56;
  int b = -47;
  int c = 143436;
  int d = -98;
  int e = 786;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d, e), sprintf(str2, format, a, b, c, d, e));
  ck_assert_pstr_eq(str1, str2);

  #test sprintf_test10
  char str1[100];
  char str2[100];
  char *format = "%-10.5c Test %+3.3d Test %-5.8d Test %-8d Test %-d";
  int a = 56;
  int b = -47;
  int c = +43436;
  int d = -98;
  int e = -56;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d, e), sprintf(str2, format, a, b, c, d, e));
  ck_assert_pstr_eq(str1, str2);

  #test sprintf_test11
  char str1[100];
  char str2[100];
  char *format = "%s Privet %d Poka %c";
  char *a = "S dnem pobedy!!!";
  int b = -47;
  char c = '\n';  
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c), sprintf(str2, format, a, b, c));
  ck_assert_pstr_eq(str1, str2);

  #test sprintf_test12
  char str1[100];
  char str2[100];
  char *format = "%s Privet %d Poka %c";
  char *a = "S dnem pobedy!!!\0";
  int b = -47;
  char c = '\n';  
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c), sprintf(str2, format, a, b, c));
  ck_assert_pstr_eq(str1, str2);

  #test sprintf_test13
  char str1[100];
  char str2[100];
  char *format = "%s Privet %d Poka %c";
  char *a = "S dnem pobedy!!!\t";
  int b = -47;
  char c = '\0';
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c), sprintf(str2, format, a, b, c));  
  ck_assert_str_eq(str1, str2);

  #test sprintf_test14
  char str1[100];
  char str2[100];
  char *format = "%s Privet %d Poka %c";
  char *a = "S dnem pobedy!!!\n";
  int b = -47;
  char c = '\t';  
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c), sprintf(str2, format, a, b, c));
  ck_assert_pstr_eq(str1, str2);

  #test sprintf_test15
  char str1[100];
  char str2[100];
  char *format = "%s Privet %c Poka %d";
  char *a = "S dnem pobedy!!!\t";
  int b = -47;
  char c = '\0';
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c), sprintf(str2, format, a, b, c));  
  ck_assert_str_eq(str1, str2);

  #test sprintf_test16
  char str1[200];
  char str2[200];
  char *format = "%6.5d Privet %.23d Privet %3.d Privet %.d %.6d";
  int a = -3015;
  int b = -712;
  int c = -99;
  int d = -38;
  int e = -100;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d, e), sprintf(str2, format, a, b, c, d, e));
  ck_assert_str_eq(str1, str2);

  #test sprintf_test17
  char str1[200];
  char str2[200];
  char *format = "%0o Privet %0.o Privet %0.0o Privet %0o MIR %.o";
  int a = 3015;
  int b = 712;
  int c = 99;
  int d = 2939;
  int e = 0123;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d, e), sprintf(str2, format, a, b, c, d, e));
  ck_assert_str_eq(str1, str2);

  #test sprintf_test18
  char str1[200];
  char str2[200];
  char *format = "%o Privet %o Privet %o Privet %o MIR %o";
  int a = 3015;
  int b = 712;
  int c = 99;
  int d = 2939;
  int e = 0123;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d, e), sprintf(str2, format, a, b, c, d, e));
  ck_assert_str_eq(str1, str2);

  #test sprintf_test19
  char str1[200];
  char str2[200];
  char *format = "%6o Privet %8o Privet %2o Privet %-5o MIR %+8o";
  int a = 3015;
  int b = -712;
  int c = 99;
  int d = -2939;
  int e = 0123;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d, e), sprintf(str2, format, a, b, c, d, e));
  ck_assert_str_eq(str1, str2);

  #test sprintf_test20
  char str1[200];
  char str2[200];
  char *format = "%6.9o Privet %8.2o Privet %2.1o Privet %-5.3o MIR %+8.2o";
  int a = 3015;
  int b = -712;
  int c = 99;
  int d = -2939;
  int e = 0123;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d, e), sprintf(str2, format, a, b, c, d, e));
  ck_assert_str_eq(str1, str2);

  #test sprintf_test21
  char str1[200];
  char str2[200];
  char *format = "%#o Privet %8.2o Privet %#o Privet %-#o MIR %+#o";
  int a = 3015;
  int b = -712;
  int c = 99;
  int d = -2939;
  int e = 0123;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d, e), sprintf(str2, format, a, b, c, d, e));
  ck_assert_str_eq(str1, str2);

  #test sprintf_test22
  char str1[200];
  char str2[200];
  char *format = "%+6.9X Privet %+8.2X Privet %2.1X Privet %-5.3X MIR %+8.2X";
  int a = 3015;
  int b = -712;
  int c = 99;
  int d = -2939;
  int e = 0123;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d, e), sprintf(str2, format, a, b, c, d, e));
  ck_assert_str_eq(str1, str2);

  #test sprintf_test23
  char str1[200];
  char str2[200];
  char *format = "%-lX Privet %hX Privet %lX Privet %-hX MIR %+lX";
  int a = 3015;
  int b = -712;
  int c = 99;
  int d = -2939;
  int e = 0123;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d, e), sprintf(str2, format, a, b, c, d, e));
  ck_assert_str_eq(str1, str2);

  #test sprintf_test24
  char str1[100];
  char str2[100];
  char *format = "%li Privet %li Privet %hi MIR %hi";
  long int a = 3088676977373646;
  signed long b = -125;
  short int c = -23758;
  short d = 118;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d), sprintf(str2, format, a, b, c, d));
  ck_assert_str_eq(str1, str2);

  #test sprintf_test25
  char str1[100];
  char str2[100];
  char *format = "%10.9i Privet %-.9i Privet %+8i MIR %.i";
  long int a = 3088676977373646;
  signed long b = -125;
  short int c = -23758;
  short d = 118;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, c, d), sprintf(str2, format, a, b, c, d));
  ck_assert_str_eq(str1, str2);

  #test sprintf_test26
  char str1[100];
  char str2[100];
  char *format = "%f Privet %5lf Privet %5.f";
  double a = -764231539.;  
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a), sprintf(str2, format, a, a, a));
  ck_assert_str_eq(str1, str2);

  #test sprintf_test27
  char str1[100];
  char str2[100];
  char *format = "%#f Privet %#lf Privet %-#.f";
  double a = -764231539.;  
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a), sprintf(str2, format, a, a, a));
  ck_assert_str_eq(str1, str2);

  #test sprintf_test28
  char str1[100];
  char str2[100];
  char *format = "%e Privet %5e Privet %5.e";
  double a = -764231539.;  
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a), sprintf(str2, format, a, a, a));
  ck_assert_str_eq(str1, str2);

  #test sprintf_test29
  char str1[100];
  char str2[100];
  char *format = "%3.6e Privet %55e Privet %5.0e";
  double a = -45687936567.56564;
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a), sprintf(str2, format, a, a, a));
  ck_assert_str_eq(str1, str2);

  #test shiraleo_sprintf_test_01
  char str1[100];
  char str2[100];
  char *format = "3.6< Privet %55e Privet %5.0e";
  double a = -45687936567.56564;
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a), sprintf(str2, format, a, a, a));
  ck_assert_str_eq(str1, str2);

  #test shiraleo_sprintf_test_02
  char str1[100];
  char str2[100];
  char *format = "3.6< Privet %55.*e Privet %5.0e";
  double a = -45687936567.56564;
  int b = 3;
  ck_assert_int_eq(s21_sprintf(str1, format, b, a, a), sprintf(str2, format, b, a, a));
  ck_assert_str_eq(str1, str2);

  #test shiraleo_sprintf_test_03
  char str1[100];
  char str2[100];
  char *format = "3.6< Privet %55.3i Privet %*.0i";
  int a = -4568;
  ck_assert_int_eq(s21_sprintf(str1, format, a, 14, a), sprintf(str2, format, a, 14, a));
  ck_assert_str_eq(str1, str2);

  #test shiraleo_sprintf_test_04
  char str1[100];
  char str2[100];
  char *format = "Number: %13.6d Pointer to number: %15.3p Pointer value:%*.0x";
  int a = -4568;
  int* p = &a;
  ck_assert_int_eq(s21_sprintf(str1, format, a, p, 14, *p), sprintf(str2, format, a, p, 14, *p));
  ck_assert_str_eq(str1, str2);

  #test shiraleo_sprintf_test_05
  char str1[100];
  char str2[100];
  char *format = "Number: %13.6d Pointer to number: %15.3p Null char:%*.0c";
  int a = -4568;
  int* p = 0;
  char c = 0;
  ck_assert_int_eq(s21_sprintf(str1, format, a, p, 14, c), sprintf(str2, format, a, p, 14, c));
  ck_assert_str_eq(str1, str2);

  #test shiraleo_sprintf_test_06
  char str1[100];
  char str2[100];
  char *format = "Number: % 013.6d Pointer to number: %+15.3p Null char:%*.0c Text:%10.5s";
  int a = -4568;
  int* p = 0;
  char c = 0;
  char* str = "Проверка";
  ck_assert_int_eq(s21_sprintf(str1, format, a, p, 14, c, str), sprintf(str2, format, a, p, 14, c, str));
  ck_assert_str_eq(str1, str2);

  #test shiraleo_sprintf_test_07
  char str1[100];
  char str2[100];
  char *format = "Number: %013d Pointer to number: % 0#17X Null char:%*.0s Text:%10.5s";
  int a = -4568;
  int* p = 0;
  char* c = 0;
  char* str = "Проверка";
  ck_assert_int_eq(s21_sprintf(str1, format, a, p, 14, c, str), sprintf(str2, format, a, p, 14, c, str));
  ck_assert_str_eq(str1, str2);

  #test shiraleo_sprintf_test_08
  char str1[100];
  char str2[100];
  char *format = "Number: % 013ld Pointer to number: % 0#17X Hex:% #015hx Text:%+10i";
  int a = 4568;
  int* p = 0;
  ck_assert_int_eq(s21_sprintf(str1, format, a, p, a, a), sprintf(str2, format, a, p, a, a));
  ck_assert_str_eq(str1, str2);

  #test shiraleo_sprintf_test_09
  char str1[100];
  char str2[100];
  char *format = "Number: %013f Big number: % 0#17X Exp:%+10.5e % #10.5E";
  float a = -456.8;
  double b = 0;
  ck_assert_int_eq(s21_sprintf(str1, format, a, b, a, b), sprintf(str2, format, a, b, a, b));
  ck_assert_str_eq(str1, str2);

  #test shiraleo_sprintf_test_10
  // setlocale(LC_ALL, "");
  char str1[100];
  char str2[100];
  char *format = "This is a simple wide char %43ls";
  wchar_t w[] = L"森我爱菠萝";
  ck_assert_int_eq(s21_sprintf(str1, format, w), sprintf(str2, format, w));
  // -------- e test --------
  #test teenybir_sprintf_e_test1
  char str1[200];
  char str2[200];
  char *format = "%e %2e %.2e %E %2E %.2E";
  double a = 123.456;
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a, a, a, a), sprintf(str2, format, a, a, a, a, a, a));
  ck_assert_str_eq(str1, str2);

  #test teenybir_sprintf_e_test2
  char str1[200];
  char str2[200];
  char *format = "%e %2e %.2e";
  double a = -0.005;
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a, a, a, a), sprintf(str2, format, a, a, a, a, a, a));
  ck_assert_str_eq(str1, str2);

  #test teenybir_sprintf_e_test3
  char str1[200];
  char str2[200];
  char *format = "%e %2e %.2e";
  float a = 0.0;
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a, a, a, a), sprintf(str2, format, a, a, a, a, a, a));
  ck_assert_str_eq(str1, str2);
  
  #test teenybir_sprintf_e_test4
  char str1[200];
  char str2[200];
  char *format = "%e %2e %.2e";
  double a = 1e-10;
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a, a, a, a), sprintf(str2, format, a, a, a, a, a, a));
  ck_assert_str_eq(str1, str2);

  #test teenybir_sprintf_e_test5
  char str1[200];
  char str2[200];
  char *format = "%e %2e %.2e";
  double a = 1e+10;
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a, a, a, a), sprintf(str2, format, a, a, a, a, a, a));
  ck_assert_str_eq(str1, str2);

  // -------- le test --------
  #test teenybir_sprintf_le_test1
  char str1[200];
  char str2[200];
  char *format = "%Le %2Le %.2Le";
  long double a = 12345.123;
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a, a, a, a), sprintf(str2, format, a, a, a, a, a, a));
  ck_assert_str_eq(str1, str2);

  #test teenybir_sprintf_le_test2
  char str1[200];
  char str2[200];
  char *format = "%LE %2LE %.2LE";
  long double a = 12345.123;
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a, a, a, a), sprintf(str2, format, a, a, a, a, a, a));
  ck_assert_str_eq(str1, str2);

  // -------- f test --------
  #test teenybir_sprintf_f_test1
  char str1[200];
  char str2[200];
  char *format = "%f %2f %.2f";
  double a = 123.456;
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a), sprintf(str2, format, a, a, a));
  ck_assert_str_eq(str1, str2);

  #test teenybir_sprintf_f_test2
  char str1[200];
  char str2[200];
  char *format = "%f %2f %.2f";
  double a = -0.005;
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a), sprintf(str2, format, a, a, a));
  ck_assert_str_eq(str1, str2);

  #test teenybir_sprintf_f_test3
  char str1[200];
  char str2[200];
  char *format = "%f %2f %.2f";
  float a = 0.0;
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a), sprintf(str2, format, a, a, a));
  ck_assert_str_eq(str1, str2);
  
  #test teenybir_sprintf_f_test4
  char str1[200];
  char str2[200];
  char *format = "%f %2f %.2f";
  double a = 1e-10;
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a), sprintf(str2, format, a, a, a));
  ck_assert_str_eq(str1, str2);

  #test teenybir_sprintf_f_test5
  char str1[200];
  char str2[200];
  char *format = "%f %2f %.2f";
  double a = 1e+10;
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a), sprintf(str2, format, a, a, a));
  ck_assert_str_eq(str1, str2);

  // -------- lf test --------
  
  #test teenybir_sprintf_lf_test2
  char str1[200];
  char str2[200];
  char *format = "%Lf %2Lf %.2Lf";
  long double a = 123.456;
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a), sprintf(str2, format, a, a, a));
  ck_assert_str_eq(str1, str2);

  // -------- x test --------
  #test teenybir_sprintf_x_test1
  char str1[200];
  char str2[200];
  char *format = "%x %2x %.2x %X %2X %.2X";
  int a = -1;
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a, a, a, a), sprintf(str2, format, a, a, a, a, a, a));
  ck_assert_str_eq(str1, str2);

  #test teenybir_sprintf_x_test2
  char str1[200];
  char str2[200];
  char *format = "%x %2x %.2x %X %2X %.2X";
  int a = 0;
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a, a, a, a), sprintf(str2, format, a, a, a, a, a, a));
  ck_assert_str_eq(str1, str2);

  #test teenybir_sprintf_X_test3
  char str1[200];
  char str2[200];
  char *format = "%x %2x %.2x %X %2X %.2X";
  unsigned int a = 0x00F0A050;
  ck_assert_int_eq(s21_sprintf(str1, format, a, a, a, a, a, a), sprintf(str2, format, a, a, a, a, a, a));
  ck_assert_str_eq(str1, str2);

  // -------- c test --------
  #test teenybir_sprintf_c_test1
  char str1[200];
  char str2[200];
  char *format = "Character: %c";
  char c = 'A';
  ck_assert_int_eq(s21_sprintf(str1, format, c), sprintf(str2, format, c));
  ck_assert_str_eq(str1, str2);

  #test teenybir_sprintf_c_test2
  char str1[200];
  char str2[200];
  setlocale(LC_ALL, "");
  char *format = "Character: %lc";
  wchar_t c = L'Ж';
  ck_assert_int_eq(s21_sprintf(str1, format, c), sprintf(str2, format, c));
  ck_assert_str_eq(str1, str2);

  // -------- alignment --------
  #test sprintf_alignment_test1
  char str1[100];
  char str2[100];
  char *format = "%-10lu";
  unsigned long int a = 0;
  ck_assert_int_eq(s21_sprintf(str1, format, a), sprintf(str2, format, a));
  ck_assert_str_eq(str1, str2);

  #test sprintf_alignment_test2
  char str1[100];
  char str2[100];
  char *format = "%-10s world!";
  char *a = "Hello";
  ck_assert_int_eq(s21_sprintf(str1, format, a), sprintf(str2, format, a));
  ck_assert_str_eq(str1, str2);

  #test sprintf_alignment_test3
  char str1[100];
  char str2[100];
  char *format = "%-10c world!";
  char a = 'A';
  ck_assert_int_eq(s21_sprintf(str1, format, a), sprintf(str2, format, a));
  ck_assert_str_eq(str1, str2);

  // -------- precision --------
  #test sprintf_precision_test1
  char str1[100];
  char str2[100];
  char *format = "%*.*f";
  int width = 10;
  int prec = 5;
  float a = 1.234567890;
  ck_assert_int_eq(s21_sprintf(str1, format, width, prec, a), sprintf(str2, format, width, prec, a));
  ck_assert_str_eq(str1, str2);

  // -------- s test --------
  #test teenybir_sprintf_s_test1
  char str1[200];
  char str2[200];
  char *format = "String: %s";
  char *s = "Hello, world!";
  ck_assert_int_eq(s21_sprintf(str1, format, s), sprintf(str2, format, s));
  ck_assert_str_eq(str1, str2);

  #test teenybir_sprintf_s_test2
  char str1[200];
  char str2[200];
  char *format = "Я с трока на русском: %s";
  wchar_t *s = L"Привет, мир!";
  ck_assert_int_eq(s21_sprintf(str1, format, s), sprintf(str2, format, s));
  ck_assert_str_eq(str1, str2);


  // -------- percent % test --------
  #test sprintf_percent_test1
  char str1[200];
  char str2[200];
  char *format = "%s 100%% Complete";
  char *s = "Test";
  ck_assert_int_eq(s21_sprintf(str1, format, s), sprintf(str2, format, s));
  ck_assert_str_eq(str1, str2);

  // -------- nothing test --------
  #test sprintf_nothing_test1
  char str1[200];
  char str2[200];
  char *format = "%s";
  char *s = "\0";
  ck_assert_int_eq(s21_sprintf(str1, format, s), sprintf(str2, format, s));
  ck_assert_str_eq(str1, str2);

  // -------- p test --------
  #test sprintf_p_test1
  char str1[100];
  char str2[100];
  char *format = "NULL pointer: %p";
  void *ptr = NULL;
  ck_assert_int_eq(s21_sprintf(str1, format, ptr), sprintf(str2, format, ptr));
  ck_assert_str_eq(str1, str2);

  #test sprintf_p_test2
  char str1[200];
  char str2[200];
  int var = 42;
  char *format = "Address of var: %p";
  ck_assert_int_eq(s21_sprintf(str1, format, &var), sprintf(str2, format, &var));
  ck_assert_str_eq(str1, str2);


  // -------- n test --------
  #test sprintf_n_test1
  char str1[100];
  char str2[100];
  int n1 = 0, n2 = 0;
  char *format = "%nHello World!";
  s21_sprintf(str1, format, &n1);
  sprintf(str2, format, &n2);
  ck_assert_int_eq(n1, n2);
  ck_assert_str_eq(str1, str2);

  #test sprintf_n_test2
  char str1[100];
  char str2[100];
  int n1 = 0, n2 = 0;
  char *format = "Hello%n World!";
  s21_sprintf(str1, format, &n1);
  sprintf(str2, format, &n2);
  ck_assert_int_eq(n1, n2);
  ck_assert_str_eq(str1, str2);



// ----------- gG test -----------
#test machelch_sprintf_gG_test1
char str1[200];
char str2[200];
char *format = "Num: %10.5g";
double d = 10000000;
for (int i = 0; i < 20; i++){
  ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
  ck_assert_str_eq(str1, str2);
  d /= 10;
}

#test machelch_sprintf_gG_test2
char str1[200];
char str2[200];
char *format = "Num: %10g";
double d = 10000000;
for (int i = 0; i < 20; i++){
  ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
  ck_assert_str_eq(str1, str2);
  d /= 10;
}

#test machelch_sprintf_gG_test3
char str1[200];
char str2[200];
char *format = "Num: %10G";
double d = 10000000;
for (int i = 0; i < 20; i++){
  ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
  ck_assert_str_eq(str1, str2);
  d /= 10;
}

#test machelch_sprintf_gG_test4
char str1[200];
char str2[200];
char *format = "Num: %10G";
double d = 10002130;
for (int i = 0; i < 20; i++){
  ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
  ck_assert_str_eq(str1, str2);
  d /= 10;
}

#test machelch_sprintf_gG_test5
char str1[200];
char str2[200];
char *format = "Num: %10.2G";
double d = 10002130;
for (int i = 0; i < 20; i++){
  ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
  ck_assert_str_eq(str1, str2);
  d /= 10;
}

#test machelch_sprintf_gG_test6
char str1[200];
char str2[200];
char *format = "Num: %#15.2G";
double d = 10002130;
for (int i = 0; i < 20; i++){
  ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
  ck_assert_str_eq(str1, str2);
  d /= 10;
}

#test machelch_sprintf_gG_test7
char str1[200];
char str2[200];
char *format = "Num: %015.2G";
double d = 10002130;
for (int i = 0; i < 20; i++){
  ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
  ck_assert_str_eq(str1, str2);
  d /= 10;
}

#test machelch_sprintf_gG_test8
char str1[200];
char str2[200];
char *format = "Num: %-015.2G";
double d = 10002130;
for (int i = 0; i < 20; i++){
  ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
  ck_assert_str_eq(str1, str2);
  d /= 10;
}

#test machelch_sprintf_gG_test9
char str1[200];
char str2[200];
char *format = "Num: %-#015.2G";
double d = 99999999;
for (int i = 0; i < 20; i++){
  ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
  ck_assert_str_eq(str1, str2);
  d /= 10;
}

#test machelch_sprintf_gG_test10
char str1[200];
char str2[200];
char *format = "Num: %-#015.0G";
double d = 10002130;
for (int i = 0; i < 20; i++){
  ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
  ck_assert_str_eq(str1, str2);
  d /= 10;
}

#test machelch_sprintf_gG_test11
char str1[200];
char str2[200];
char *format = "Num: %-#015.10G";
double d = 15912.142;
for (int i = 0; i < 20; i++){
  ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
  ck_assert_str_eq(str1, str2);
  d /= 10;
}

#test machelch_sprintf_gG_test12
char str1[200];
char str2[200];
char *format = "Num: % #015.10G";
double d = 15912.142;
for (int i = 0; i < 20; i++){
  ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
  ck_assert_str_eq(str1, str2);
  d /= 10;
}

#test machelch_sprintf_gG_test13
char str1[200];
char str2[200];
char *format = "Num: %-#015.10G";
double d = 0;
for (int i = 0; i < 20; i++){
  ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
  ck_assert_str_eq(str1, str2);
  d /= 10;
}

#test machelch_sprintf_gG_test14
char str1[200];
char str2[200];
char *format = "Num: %-#015.2g";
double d = 99999999;
for (int i = 0; i < 20; i++){
  ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
  ck_assert_str_eq(str1, str2);
  d /= 10;
}

#test machelch_sprintf_gG_test15
char str1[200];
char str2[200];
char *format = "Num: %-015.2g";
double d = 99999999;
for (int i = 0; i < 20; i++){
  ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
  ck_assert_str_eq(str1, str2);
  d /= 10;
}

#test machelch_sprintf_gG_test16
char str1[200];
char str2[200];
char *format = "Num: %-#015.2g";
double d = 100000000;
for (int i = 0; i < 20; i++){
  ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
  ck_assert_str_eq(str1, str2);
  d /= 10;
}

#test machelch_sprintf_n_test1
char str1[200];
char str2[200];
char *format = "Test %n test";
int d = 0;
int d1 = 0;
ck_assert_int_eq(s21_sprintf(str1, format, &d), sprintf(str2, format, &d1));
ck_assert_str_eq(str1, str2);
ck_assert_int_eq(d, d1);

#test machelch_sprintf_p_test1
char str1[200];
char str2[200];
char *format = "Test %p test";
int d = 0;
ck_assert_int_eq(s21_sprintf(str1, format, &d), sprintf(str2, format, &d));
ck_assert_str_eq(str1, str2);

#test machelch_sprintf_p_test2
char str1[200];
char str2[200];
char *format = "Test %p test";
int d = 0;
ck_assert_int_eq(s21_sprintf(str1, format, &d), sprintf(str2, format, &d));
ck_assert_str_eq(str1, str2);

#test machelch_sprintf_s_test1
char str1[200];
char str2[200];
char *format = "Test %s test";
char *str = NULL;
ck_assert_int_eq(s21_sprintf(str1, format, str), sprintf(str2, format, str));
ck_assert_str_eq(str1, str2);

#test machelch_sprintf_d_test1
char str1[200];
char str2[200];
char *format = "Test %010d test";
int a = 10;
ck_assert_int_eq(s21_sprintf(str1, format, a), sprintf(str2, format, a));
ck_assert_str_eq(str1, str2);

#test machelch_sprintf_s_test2
setlocale(LC_ALL, "");
char str1[200];
char str2[200];
char *format = "Test %lc %ls test";
wchar_t ch = L'ф';
wchar_t *str = L"Привет, мир!";
ck_assert_int_eq(s21_sprintf(str1, format, ch, str), sprintf(str2, format, ch, str));
ck_assert_str_eq(str1, str2);

#test machelch_sprintf_d_test2
setlocale(LC_ALL, "");
char str1[200];
char str2[200];
char *format = "Test %+010d test";
int d = -10;
ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
ck_assert_str_eq(str1, str2);

#test machelch_sprintf_d_test3
setlocale(LC_ALL, "");
char str1[200];
char str2[200];
char *format = "Test %#010d test";
int d = 10;
ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
ck_assert_str_eq(str1, str2);

#test machelch_sprintf_s_test4
setlocale(LC_ALL, "");
char str1[200];
char str2[200];
char *format = "Test %+010d test";
int d = 10;
ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
ck_assert_str_eq(str1, str2);

#test machelch_sprintf_x_test1
char str1[200];
char str2[200];
char *format = "Test %#010x test";
int d = 10;
ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
ck_assert_str_eq(str1, str2);

#test machelch_sprintf_x_test2
char str1[200];
char str2[200];
char *format = "Test %#010X test";
int d = 10;
ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
ck_assert_str_eq(str1, str2);

#test machelch_sprintf_u_test1
char str1[200];
char str2[200];
char *format = "Test %.10u test";
unsigned d = 10;
ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
ck_assert_str_eq(str1, str2);

#test machelch_sprintf_error_test1
char str1[200];
char str2[200];
char *format = "%>sdzcx %u";
unsigned d = 10;
ck_assert_int_eq(s21_sprintf(str1, format, d), sprintf(str2, format, d));
ck_assert_str_eq(str1, str2);

#test sscanf_EOF1
  char fstr[] = "%d";
  char str[] = "        ";

  int16_t res1 = s21_sscanf(str, fstr, 0);
  int16_t res2 = sscanf(str, fstr, 100);
  ck_assert_int_eq(res1, res2);



#test sscanf_EOF2
  char fstr[] = "%d ";
  char str[] = "               ";
  int16_t a1 = 0, a2 = 0;

  int16_t res1 = s21_sscanf(str, fstr, &a1);
  int16_t res2 = sscanf(str, fstr, &a2);
  ck_assert_int_eq(res1, res2);



#test sscanf_EOF3
  char fstr[] = "%d ";
  char str[] = "  ";
  int16_t a1 = 0, a2 = 0;

  int16_t res1 = s21_sscanf(str, fstr, &a1);
  int16_t res2 = sscanf(str, fstr, &a2);
  ck_assert_int_eq(res1, res2);



#test sscanf_only_chars1
  char fstr[] = "%c %c %c %c";
  char str[] = "   a     b c d";
  int16_t a1 = 0, a2 = 5, b1 = 0, b2 = 5, c1 = 0, c2 = 5, d1 = 0, d2 = 5;

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);

  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_only_chars2
  char fstr[] = "%c%c%c%c";
  char str[] = "abcd";
  int16_t a1 = 0, a2 = 5, b1 = 0, b2 = 5, c1 = 0, c2 = 5, d1 = 0, d2 = 5;

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);

  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_only_chars3
  char fstr[] = "%c %c %c      %c";
  char str[] = "1 a 3   c           ";
  int16_t a1 = 0, a2 = 5, b1 = 0, b2 = 5, c1 = 0, c2 = 5, d1 = 0, d2 = 5;

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_only_chars4
  char fstr[] = "%c %c %c %c";
  char str[] = "   000 0    ";
  int16_t a1 = 0, a2 = 5, b1 = 0, b2 = 5, c1 = 0, c2 = 5, d1 = 0, d2 = 5;

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);

  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_only_chars5
  char fstr[] = "%c %c %c %c";
  char str[] = "tttt";
  int16_t a1 = 0, a2 = 5, b1 = 0, b2 = 5, c1 = 0, c2 = 5, d1 = 0, d2 = 5;

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);

  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_special_symbols_as_chars1
  char fstr[] = "%c%c%c%c";
  char str[] = "\\\n\t\t\t";
  int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_special_symbols_as_chars2
  char fstr[] = "%c %c %c %c";
  char str[] = "z ' ' /";
  int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_special_symbols_as_chars3
  char fstr[] = "%c%*c%c%c";
  char str[] = "ABCD";
  int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0;

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1);

  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);



#test sscanf_chars_flags1
  char fstr[] = "%c %c %c %c";
  char str[] = "z *'@";
  int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_chars_flags2
  char fstr[] = "%1c %c %c %0c";
  char str[] = "z *'@";
  int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_chars_flags3
  char fstr[] = "%c %c %c %c";
  char str[] = "z *'@";
  int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_chars_flags4
  char fstr[] = "%c %c %c %c";
  char str[] = "z *'@";
  int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_chars_flags5
  char fstr[] = "%*c%*c%*c%c";
  char str[] = "abcde";
  int16_t a1 = 0, a2 = 0;

  int16_t res1 = s21_sscanf(str, fstr, &a1);
  int16_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_chars_aster1
  char fstr[] = "%*c%*c%*c%*c";
  char str[] = "   c ";
  int16_t a1 = 0, a2 = 0;

  int16_t res1 = s21_sscanf(str, fstr, &a1);
  int16_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_chars_aster2
  char fstr[] = "%*c%*c%*c%c";
  char str[] = "abcd ";
  int16_t a1 = 0, a2 = 0;

  int16_t res1 = s21_sscanf(str, fstr, &a1);
  int16_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_only_ints1
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char fstr[] = "%ld %ld %ld %ld";
  const char str[] = "555 666 777 888";

  int32_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int32_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_only_ints2
  int16_t a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "1337 21 5008 3000";
  const char fstr[] = "%hd %hd %hd %hd";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_ints_nwidth1
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "1337 21 5008 300004";
  const char fstr[] = "%1ld %3ld %1ld %4ld";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_ints_nwidth2
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "1337";
  const char fstr[] = "%1ld %1ld %1ld %1ld";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_ints_nwidth3
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "100000000000000005";
  const char fstr[] = "%3ld%ld%1ld%5ld";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_ints_nwidth4
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "1337";
  const char fstr[] = "%15ld %1ld %1ld %1ld";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_ints_astwidth1
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0;
  const char str[] = "1337123123 1 123412341234 1 999999 0";
  const char fstr[] = "%*d %ld %*d %ld %*d %ld";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);



#test sscanf_ints_astwidth2
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "1337";
  const char fstr[] = "%15ld %1ld %1ld %1ld";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_ints_astwidth3
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "1337";
  const char fstr[] = "%15ld %1ld %1ld %1ld";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_ints_astwidth4
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "1337";
  const char fstr[] = "%15ld %1ld %1ld %1ld";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_signed_ints1
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "11337 ++3 -5 ------4";
  const char fstr[] = "%ld %ld %ld %ld";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_signed_ints2
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "-1337 +1 -1 -1";
  const char fstr[] = "%15ld %1ld %1ld %5ld";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_signed_ints3
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "-0 +0 +0 -0";
  const char fstr[] = "%2ld %1ld %1ld %1ld";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_signed_ints4
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "1 01 10 0";
  const char fstr[] = "%ld %ld %ld %ld";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_spec_i_int1
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "300 500 -600 +700";
  const char fstr[] = "%li %li %li %li";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_spec_i_int2
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "300500-600+700 111";
  const char fstr[] = "%li %ld %ld %li";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_spec_i_int3
  long a1 = 0, a2 = 0, c1 = 0, c2 = 0;
  char b1 = 0, b2 = 0, d1 = 0, d2 = 0;
  const char str[] = "300500-600+700+400";
  const char fstr[] = "%li%c%li%c";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_spec_i_int4
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "  55555 f f f5555555 ddd   4    3    1 ";
  const char fstr[] = "%li %ld %ld %li";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_spec_i_hex1
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "0xFFF 0xA123123 0x123123 0x0";
  const char fstr[] = "%li %ld %ld %li";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_spec_i_hex2
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = " 0xFFFF 0xf 0xf 0xf5555555 ddd   4    3    1 ";
  const char fstr[] = "%li %ld %ld %li";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_spec_i_oct1
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "  055555 0f 0f 0f5555555 0ddd   4    3    1 ";
  const char fstr[] = "%li %ld %ld %li";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_spec_i_oct2
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "  055555 0f 0f 0f5555555 0ddd   4    3    1 ";
  const char fstr[] = "%li %ld %ld %li";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



/* [%s] */

#test sscanf_strings1
  char s1[512] = {'\0'};
  char s2[512] = {'\0'};
  char s3[512] = {'\0'};
  char s4[512] = {'\0'};

  char s5[512] = {'\0'};
  char s6[512] = {'\0'};
  char s7[512] = {'\0'};
  char s8[512] = {'\0'};

  const char str[] = "Aboba Floppa Keppa Shleppa Anuroba";
  const char fstr[] = "%s %s %s %s";

  int16_t res1 = s21_sscanf(str, fstr, s1, s2, s3, s4);
  int16_t res2 = sscanf(str, fstr, s5, s6, s7, s8);

  ck_assert_int_eq(res1, res2);

  ck_assert_str_eq(s1, s5);
  ck_assert_str_eq(s2, s6);
  ck_assert_str_eq(s3, s7);
  ck_assert_str_eq(s4, s8);



#test sscanf_strings_mixed3
  char s1[512] = {'\0'};
  char s2[512] = {'\0'};
  char s3[512] = {'\0'};
  char s4[512] = {'\0'};

  char s5[512] = {'\0'};
  char s6[512] = {'\0'};
  char s7[512] = {'\0'};
  char s8[512] = {'\0'};

  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

  const char str[] = "Aboba 123 Floppa -3 Keppa 4444Shleppa 333Anuroba 3";
  const char fstr[] = "%s%ld%s%d%s%d%s";

  int16_t res1 = s21_sscanf(str, fstr, s1, &a1, s2, &b1, s3, &c1, s4, &d1);
  int16_t res2 = s21_sscanf(str, fstr, s5, &a2, s6, &b2, s7, &c2, s8, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);

  ck_assert_str_eq(s1, s5);
  ck_assert_str_eq(s2, s6);
  ck_assert_str_eq(s3, s7);
  ck_assert_str_eq(s4, s8);



#test sscanf_strings2
  char s1[512] = {'\0'};
  char s2[512] = {'\0'};
  char s3[512] = {'\0'};
  char s4[512] = {'\0'};

  char s5[512] = {'\0'};
  char s6[512] = {'\0'};
  char s7[512] = {'\0'};
  char s8[512] = {'\0'};

  const char str[] = "aboba\tshlepa\tasdfasdf\tasdfasdf";
  const char fstr[] = "%s%s%s%s";

  int16_t res1 = s21_sscanf(str, fstr, s1, s2, s3, s4);
  int16_t res2 = sscanf(str, fstr, s5, s6, s7, s8);

  ck_assert_int_eq(res1, res2);

  ck_assert_str_eq(s1, s5);
  ck_assert_str_eq(s2, s6);
  ck_assert_str_eq(s3, s7);
  ck_assert_str_eq(s4, s8);



#test sscanf_strings3
  char s1[512] = {'\0'};
  char s2[512] = {'\0'};
  char s3[512] = {'\0'};
  char s4[512] = {'\0'};

  char s5[512] = {'\0'};
  char s6[512] = {'\0'};
  char s7[512] = {'\0'};
  char s8[512] = {'\0'};

  const char str[] = "aboba\tkepaboba floppa shleppa koooppa ap p p p p";
  const char fstr[] = "%*s%*s%*s%*s";

  int16_t res1 = s21_sscanf(str, fstr);
  int16_t res2 = sscanf(str, fstr);

  ck_assert_int_eq(res1, res2);

  ck_assert_str_eq(s1, s5);
  ck_assert_str_eq(s2, s6);
  ck_assert_str_eq(s3, s7);
  ck_assert_str_eq(s4, s8);



#test sscanf_strings4
  char s1[512] = {'\0'};
  char s2[512] = {'\0'};
  char s3[512] = {'\0'};
  char s4[512] = {'\0'};

  char s5[512] = {'\0'};
  char s6[512] = {'\0'};
  char s7[512] = {'\0'};
  char s8[512] = {'\0'};

  const char str[] = "aboba\tshlepa\tasdfasdf\tasdfasdf";
  const char fstr[] = "%1s%1s%1s%1s";

  int16_t res1 = s21_sscanf(str, fstr, s1, s2, s3, s4);
  int16_t res2 = sscanf(str, fstr, s5, s6, s7, s8);

  ck_assert_int_eq(res1, res2);

  ck_assert_str_eq(s1, s5);
  ck_assert_str_eq(s2, s6);
  ck_assert_str_eq(s3, s7);
  ck_assert_str_eq(s4, s8);



#test sscanf_strings5
  char s1[512] = {'\0'};
  char s2[512] = {'\0'};
  char s3[512] = {'\0'};
  char s4[512] = {'\0'};

  char s5[512] = {'\0'};
  char s6[512] = {'\0'};
  char s7[512] = {'\0'};
  char s8[512] = {'\0'};

  const char str[] = "aboba\tshlepa\tasdfasdf\tasdfasdf";
  const char fstr[] = "%3s%3s%3s%3s";

  int16_t res1 = s21_sscanf(str, fstr, s1, s2, s3, s4);
  int16_t res2 = sscanf(str, fstr, s5, s6, s7, s8);

  ck_assert_int_eq(res1, res2);

  ck_assert_str_eq(s1, s5);
  ck_assert_str_eq(s2, s6);
  ck_assert_str_eq(s3, s7);
  ck_assert_str_eq(s4, s8);



#test sscanf_strings6
  char s1[512] = {'\0'};
  char s2[512] = {'\0'};
  char s3[512] = {'\0'};
  char s4[512] = {'\0'};

  char s5[512] = {'\0'};
  char s6[512] = {'\0'};
  char s7[512] = {'\0'};
  char s8[512] = {'\0'};

  const char str[] = "aboba\tshlepa\tasdfasdf\tasdfasdf";
  const char fstr[] = "%150s%1s%1s\t%3s";

  int16_t res1 = s21_sscanf(str, fstr, s1, s2, s3, s4);
  int16_t res2 = sscanf(str, fstr, s5, s6, s7, s8);

  ck_assert_int_eq(res1, res2);

  ck_assert_str_eq(s1, s5);
  ck_assert_str_eq(s2, s6);
  ck_assert_str_eq(s3, s7);
  ck_assert_str_eq(s4, s8);



// strings_mixed1

#test sscanf_strings_mixed1
  unsigned long int a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0;
  long d1 = 0, d2 = 0;
  long double e1 = 0, e2 = 0;

  const char str[] =
      "4444444"
      "eeeeeee\teeeeeee";
  const char fstr[] = "%5s %1s %*s %*s %lu %s %lu %lu %ld %Lf %33s";

  char s1[512] = {'\0'};
  char s2[512] = {'\0'};
  char s3[512] = {'\0'};
  char s4[512] = {'\0'};
  char s5[512] = {'\0'};
  char s6[512] = {'\0'};
  char s7[512] = {'\0'};
  char s8[512] = {'\0'};
  char s9[512] = {'\0'};
  char s10[512] = {'\0'};

  int16_t res1 = s21_sscanf(str, fstr, s7, s9, &a1, s5, &b1, &c1, &d1, &e1, s1);
  int16_t res2 = sscanf(str, fstr, s8, s10, &a2, s6, &b2, &c2, &d2, &e2, s2);

  ck_assert_int_eq(res1, res2);
  ck_assert_str_eq(s1, s2);
  ck_assert_str_eq(s3, s4);
  ck_assert_str_eq(s5, s6);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_strings_mixed2
  int d1 = 0, d2 = 0, b1 = 0, b2 = 0, a1 = 0, a2 = 0;
  long v1, v2;

  const char str[] = "1 1 1 1 1 -1";
  const char fstr[] = "%1s %5d %1s %1s %d %ld %d";

  char s1[512] = {'\0'};
  char s2[512] = {'\0'};
  char s3[512] = {'\0'};
  char s4[512] = {'\0'};
  char s5[512] = {'\0'};
  char s6[512] = {'\0'};

  int16_t res1 = s21_sscanf(str, fstr, s1, &a1, s2, s3, &b1, &v1, &d1);
  int16_t res2 = sscanf(str, fstr, s4, &a2, s5, s6, &b2, &v2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_str_eq(s1, s2);
  ck_assert_str_eq(s3, s4);
  ck_assert_str_eq(s5, s6);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(d1, d2);



/* [%n] */

#test sscanf_n1
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  int32_t n1 = 0, n2 = 5;

  const char str[512] = "50 160 70 80";
  const char fstr[512] = "%li %li %n %li %li";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &n1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &n2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(n1, n2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_n2
  int n1 = 1, n2 = 5;

  char s1[512] = {'\0'};
  char s2[512] = {'\0'};
  char s3[512] = {'\0'};
  char s5[512] = {'\0'};
  char s6[512] = {'\0'};
  char s7[512] = {'\0'};

  const char str[] = "cbobErobM fl? asdfasdflkasdf asdfasdf asdfasdf 88888";
  const char fstr[] = "%s %s %n %s";

  int32_t res1 = s21_sscanf(str, fstr, s1, s2, &n1, s3);
  int32_t res2 = sscanf(str, fstr, s5, s6, &n2, s7);

  ck_assert_int_eq(res1, res2);

  ck_assert_int_eq(n1, n2);
  ck_assert_str_eq(s1, s5);
  ck_assert_str_eq(s2, s6);
  ck_assert_str_eq(s3, s7);



#test sscanf_n3
  int n1 = 0, n2 = 5;

  const char str[512] = "50 60 70 80";
  const char fstr[512] = "%n";

  int16_t res1 = s21_sscanf(str, fstr, &n1);
  int16_t res2 = sscanf(str, fstr, &n2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(n1, n2);



#test sscanf_n4
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  int32_t n1 = 0, n2 = 5;

  const char str[] = "50 60 70 80";
  const char fstr[] = "%li %li %n %li %li";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &n1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &n2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(n1, n2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_n5
  long a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  int n1 = 0, n2 = 5;

  const char str[] = "50 60 70 80";
  const char fstr[] = "%li %li %n %li %li";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &n1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &n2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(n1, n2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



/* [%f] / [%g] / %[%G] */

#test sscanf_floats1
  long double a1 = 1, a2 = 0, b1 = 1, b2 = 0, c1 = 1, c2 = 0, d1 = 1, d2 = 0;

  const char str[] = "53.1 -4.1135 41.3333 +2.0001";
  const char fstr[] = "%Lf %Lf %Lf %Lf";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_double_eq(a1, a2);
  ck_assert_double_eq(b1, b2);
  ck_assert_double_eq(c1, c2);
  ck_assert_double_eq(d1, d2);



#test sscanf_floats2
  double a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

  const char str[] = "0.00001 -4123123 4. .";
  const char fstr[] = "%lf %lf %lf %lf";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_double_eq(a1, a2);
  ck_assert_double_eq(b1, b2);
  ck_assert_double_eq(c1, c2);
  ck_assert_double_eq(d1, d2);



#test sscanf_floats3
  float a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

  const char str[] = ". . . .";
  const char fstr[] = "%f %f %f %f";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_double_eq(a1, a2);
  ck_assert_double_eq(b1, b2);
  ck_assert_double_eq(c1, c2);
  ck_assert_double_eq(d1, d2);



#test sscanf_floats4
  long double a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

  const char str[] = "513.41 -4.14135 414.3333 +112.0001";
  const char fstr[] = "%Lf %Lf %Lf %Lf";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_double_eq(a1, a2);
  ck_assert_double_eq(b1, b2);
  ck_assert_double_eq(c1, c2);
  ck_assert_double_eq(d1, d2);



#test sscanf_floats5
  float a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0;

  const char str[] = "53.1 -4.1135 411231.333 +2.0001";
  const char fstr[] = "%*f %f %f %f";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2);

  ck_assert_int_eq(res1, res2);
  ck_assert_float_eq(a1, a2);
  ck_assert_float_eq(b1, b2);
  ck_assert_float_eq(c1, c2);



#test sscanf_floats_sci1
  float a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

  const char str[] = "1.4441 1.31e+4 -3.31e-4 0.444e-5";
  const char fstr[] = "%G %G %G %G";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_double_eq(a1, a2);
  ck_assert_double_eq(b1, b2);
  ck_assert_double_eq(c1, c2);
  ck_assert_double_eq(d1, d2);



#test sscanf_floats_sci2
  float a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

  const char str[] = "inf 1.31e+4 NaN 0.444e-5";
  const char fstr[] = "%G %G %G %G";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_ldouble_eq(a1, a2);
  // Unfortunately, assertions for inf do not work correctly in libcheck
  // ck_assert_ldouble_infinite(a1);
  // ck_assert_ldouble_infinite(a2);
  ck_assert_double_eq(b1, b2);
  ck_assert_float_nan(c1);
  ck_assert_float_nan(c2);
  ck_assert_double_eq(d1, d2);



#test sscanf_floats_sci3
  float a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

  const char str[] = "inF InF inF INF";
  const char fstr[] = "%G %G %G %G";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_ldouble_eq(a1, a2);
  ck_assert_double_eq(b1, b2);
  ck_assert_double_eq(c1, c2);
  ck_assert_double_eq(d1, d2);



#test sscanf_floats_sci4
  float a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

  const char str[] = "Nan NAN 0.0000 0";
  const char fstr[] = "%G %G %G %G";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_float_nan(a1);
  ck_assert_float_nan(a2);
  ck_assert_float_nan(b1);
  ck_assert_float_nan(b2);
  ck_assert_ldouble_eq(c1, c2);
  ck_assert_ldouble_eq(d1, d2);



#test sscanf_floats_sci5
  float a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

  const char str[] =
      "nAN           INF                   -0.1111         1e-10";
  const char fstr[] = "%G %G %G %G";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_float_nan(a1);
  ck_assert_float_nan(a2);
  ck_assert_ldouble_eq(b1, b2);
  ck_assert_ldouble_eq(c1, c2);
  ck_assert_ldouble_eq(d1, d2);



/* [%u] */

#test sscanf_uint1
  unsigned short a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "-1337 +21 --5008 3000";
  const char fstr[] = "%hu %hu %hu %hu";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_uint_eq(res1, res2);
  ck_assert_uint_eq(a1, a2);
  ck_assert_uint_eq(b1, b2);
  ck_assert_uint_eq(c1, c2);
  ck_assert_uint_eq(d1, d2);



#test sscanf_uint2
  unsigned long int a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0,
                    d2 = 0;
  const char str[] = "-1337 233333331 5008 3000";
  const char fstr[] = "%1lu %2lu %5lu %4lu";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_uint3
  unsigned long int a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0;
  long d1 = 0, d2 = 0;
  long double v1, v2;

  const char str[] =
      "\t\t\t\t\t\n 3      adsfdfa%$$$$`adfasdfasdfaszcvzcxvcv -1337 "
      "anurobich+ 21 -5008 -33000 0.3333";
  const char fstr[] = "%*s %*s %lu %s %lu %lu %ld %Lf";

  char s1[512] = {'\0'};
  char s2[512] = {'\0'};

  int16_t res1 = s21_sscanf(str, fstr, &a1, s1, &b1, &c1, &d1, &v1);
  int16_t res2 = sscanf(str, fstr, &a2, s2, &b2, &c2, &d2, &v2);

  ck_assert_uint_eq(res1, res2);
  ck_assert_str_eq(s1, s2);
  ck_assert_uint_eq(a1, a2);
  ck_assert_uint_eq(b1, b2);
  ck_assert_uint_eq(c1, c2);
  ck_assert_uint_eq(d1, d2);
  ck_assert_ldouble_eq_tol(v1, v2, 0.0001);



#test sscanf_uint4
  unsigned short a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "-1337 +21 --5008 3000";
  const char fstr[] = "%hu %hu %hu %hu";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_uint5
  unsigned short a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "-1337 +21 --5008 3000";
  const char fstr[] = "%hu %hu %hu %hu";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_uint6
  unsigned short a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;
  const char str[] = "-1337 +21 --5008 3000";
  const char fstr[] = "%hu %hu %hu %hu";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int16_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_upeer_hex_base_version
  uint32_t a1, a2;
  const char str[] = "F";
  const char fstr[] = "%X";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_upeer_hex_overflow
  uint32_t a1, a2;
  const char str[] = "0xFFFFFFFF";
  const char fstr[] = "%X";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_upeer_hex_0x
  uint32_t a1, a2;
  const char str[] = "0x";
  const char fstr[] = "%X";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_upeer_hex_0X
  uint32_t a1, a2;
  const char str[] = "0X";
  const char fstr[] = "%X";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_upeer_hex_empty
  uint32_t a1, a2;
  const char str[] = "";
  const char fstr[] = "%X";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);



#test sscanf_upeer_hex_fail
  uint32_t a1, a2;
  const char str[] = "qF";
  const char fstr[] = "%X";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);



#test sscanf_upeer_hex_spaces_tabs_sns
  uint32_t a1, a2;
  const char str[] = "          \n             \n     F";
  const char fstr[] = "%X";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_upeer_hex_short
  uint16_t a1, a2;
  const char str[] = "F";
  const char fstr[] = "%hX";
  uint16_t res1 = s21_sscanf(str, fstr, &a1);
  uint16_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_upeer_hex_long
  unsigned long int a1, a2;
  const char str[] = "F";
  const char fstr[] = "%lX";
  uint16_t res1 = s21_sscanf(str, fstr, &a1);
  uint16_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_upeer_hex_2x
  uint32_t a1, a2;
  const char str[] = "0xFF0x0xFFF 0xFFxFF";
  const char fstr[] = "%X";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_upeer_hex_star
  const char str[] = "0xFF0x0xFFF 0xFFxFF";
  const char fstr[] = "%*X";
  uint32_t res1 = s21_sscanf(str, fstr);
  uint32_t res2 = sscanf(str, fstr);

  ck_assert_int_eq(res1, res2);



#test sscanf_upeer_hex_nohex
  uint32_t a1, a2;
  const char str[] = "tqwqpl";
  const char fstr[] = "%X";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);



#test sscanf_upeer_hex_lower
  uint32_t a1, a2;
  const char str[] = "abcdef";
  const char fstr[] = "%X";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_upeer_hex_sign
  uint32_t a1, a2;
  const char str[] = "-f";
  const char fstr[] = "%X";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_lower_hex_base_version
  uint32_t a1, a2;
  const char str[] = "f";
  const char fstr[] = "%x";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_lower_hex_overflow
  uint32_t a1, a2;
  const char str[] = "0xfffffffffffffffffff";
  const char fstr[] = "%x";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_lower_hex_0x
  uint32_t a1, a2;
  const char str[] = "0x";
  const char fstr[] = "%x";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_lower_hex_0X
  uint32_t a1, a2;
  const char str[] = "0X";
  const char fstr[] = "%x";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_lower_hex_empty
  uint32_t a1, a2;
  const char str[] = "";
  const char fstr[] = "%x";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);



#test sscanf_lower_hex_fail
  uint32_t a1, a2;
  const char str[] = "qF";
  const char fstr[] = "%x";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);



#test sscanf_lower_hex_spaces_tabs_sns
  uint32_t a1, a2;
  const char str[] = "          \n             \n     F";
  const char fstr[] = "%x";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_lower_hex_short
  uint16_t a1, a2;
  const char str[] = "ff";
  const char fstr[] = "%hx";
  uint16_t res1 = s21_sscanf(str, fstr, &a1);
  uint16_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_lower_hex_long
  unsigned long int a1, a2;
  const char str[] = "ff";
  const char fstr[] = "%lx";
  uint16_t res1 = s21_sscanf(str, fstr, &a1);
  uint16_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_lower_hex_2x
  uint32_t a1, a2;
  const char str[] = "0xFF0x0xFFF 0xFFxFF";
  const char fstr[] = "%x";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_lower_hex_star
  const char str[] = "0xFF0x0xFFF 0xFFxFF";
  const char fstr[] = "%*x";
  uint32_t res1 = s21_sscanf(str, fstr);
  uint32_t res2 = sscanf(str, fstr);

  ck_assert_int_eq(res1, res2);



#test sscanf_lower_hex_nohex
  uint32_t a1, a2;
  const char str[] = "tqwqpl";
  const char fstr[] = "%x";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);



#test sscanf_lower_hex_lower
  uint32_t a1, a2;
  const char str[] = "abcdef";
  const char fstr[] = "%x";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_lower_hex_sign
  uint32_t a1, a2;
  const char str[] = "-f";
  const char fstr[] = "%x";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_upper_hex_len
  uint32_t a1, a2;
  const char str[] = "123531FFF";
  const char fstr[] = "%2X";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_lower_hex_len
  uint32_t a1, a2;
  const char str[] = "123531FFF";
  const char fstr[] = "%2x";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_octal_base_version
  uint32_t a1, a2;
  const char str[] = "777";
  const char fstr[] = "%o";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_octal_overflow
  uint32_t a1, a2;
  const char str[] = "0x7777777777777777777777";
  const char fstr[] = "%o";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_octal_0x
  uint32_t a1, a2;
  const char str[] = "0x";
  const char fstr[] = "%o";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_octal_0X
  uint32_t a1, a2;
  const char str[] = "0X";
  const char fstr[] = "%o";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_octal_empty
  uint32_t a1, a2;
  const char str[] = "";
  const char fstr[] = "%o";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);



#test sscanf_octal_fail
  uint32_t a1, a2;
  const char str[] = "q1";
  const char fstr[] = "%o";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);



#test sscanf_octal_spaces_tabs_sns
  uint32_t a1, a2;
  const char str[] = "          \n             \n     5";
  const char fstr[] = "%o";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_octal_short
  uint16_t a1, a2;
  const char str[] = "12";
  const char fstr[] = "%ho";
  uint16_t res1 = s21_sscanf(str, fstr, &a1);
  uint16_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_octal_long
  unsigned long int a1, a2;
  const char str[] = "57234";
  const char fstr[] = "%lo";
  uint16_t res1 = s21_sscanf(str, fstr, &a1);
  uint16_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_octal_2x
  uint32_t a1, a2;
  const char str[] = "0x12320x213x123213";
  const char fstr[] = "%o";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_octal_star
  const char str[] = "521561612";
  const char fstr[] = "%*o";
  uint32_t res1 = s21_sscanf(str, fstr);
  uint32_t res2 = sscanf(str, fstr);

  ck_assert_int_eq(res1, res2);



#test sscanf_octal_nohex
  uint32_t a1, a2;
  const char str[] = "tqwqpl";
  const char fstr[] = "%o";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);



#test sscanf_octal_lower
  uint32_t a1, a2;
  const char str[] = "01234567";
  const char fstr[] = "%o";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_octal_sign
  uint32_t a1, a2;
  const char str[] = "-66";
  const char fstr[] = "%o";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_octal_len
  uint32_t a1, a2;
  const char str[] = "123531";
  const char fstr[] = "%2o";
  uint32_t res1 = s21_sscanf(str, fstr, &a1);
  uint32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_buff1
  int32_t a1, a2;
  int32_t b1, b2;
  const char str[] = "12 keppa 12";
  const char fstr[] = "%d keppa %d";
  int32_t res1 = s21_sscanf(str, fstr, &a1, &b1);
  int32_t res2 = sscanf(str, fstr, &a2, &b2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);



#test sscanf_buff2
  int32_t a1, a2;
  int32_t b1, b2;
  const char str[] = "12keppa12";
  const char fstr[] = "%dkeppa%d";
  int32_t res1 = s21_sscanf(str, fstr, &a1, &b1);
  int32_t res2 = sscanf(str, fstr, &a2, &b2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);



#test sscanf_pointer1
  int *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;
  const char str[] = "0xFFFF 0xAAAA 0x7123 0xBBC1FF";
  const char fstr[] = "%p %p %p %p";

  int16_t res1 = s21_sscanf(str, fstr, (void **)&a1, (void **)&b1, (void **)&c1,
                            (void **)&d1);
  int16_t res2 =
      sscanf(str, fstr, (void **)&a2, (void **)&b2, (void **)&c2, (void **)&d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(a1, a2);
  ck_assert_ptr_eq(b1, b2);
  ck_assert_ptr_eq(c1, c2);
  ck_assert_ptr_eq(d1, d2);



#test sscanf_pointer2
  int *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;
  const char str[] = "0xFFFF 0xAAAA 0x7123 0xBBC1FF";
  const char fstr[] = "%p %p %p %p";

  int16_t res1 = s21_sscanf(str, fstr, (void **)&a1, (void **)&b1, (void **)&c1,
                            (void **)&d1);
  int16_t res2 =
      sscanf(str, fstr, (void **)&a2, (void **)&b2, (void **)&c2, (void **)&d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(a1, a2);
  ck_assert_ptr_eq(b1, b2);
  ck_assert_ptr_eq(c1, c2);
  ck_assert_ptr_eq(d1, d2);



#test sscanf_pointer3
  int *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;
  const char str[] = "0xFFFF 0xAAAA 0x7123 0xBBC1FF";
  const char fstr[] = "%p %p %p %p";

  int16_t res1 = s21_sscanf(str, fstr, (void **)&a1, (void **)&b1, (void **)&c1,
                            (void **)&d1);
  int16_t res2 =
      sscanf(str, fstr, (void **)&a2, (void **)&b2, (void **)&c2, (void **)&d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(a1, a2);
  ck_assert_ptr_eq(b1, b2);
  ck_assert_ptr_eq(c1, c2);
  ck_assert_ptr_eq(d1, d2);



#test sscanf_pointer4
  int *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;
  const char str[] = "0xFFFF 0xAAAA 0x7123 0xBBC1FF";
  const char fstr[] = "%p %p %p %p";

  int16_t res1 = s21_sscanf(str, fstr, (void **)&a1, (void **)&b1, (void **)&c1,
                            (void **)&d1);
  int16_t res2 =
      sscanf(str, fstr, (void **)&a2, (void **)&b2, (void **)&c2, (void **)&d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(a1, a2);
  ck_assert_ptr_eq(b1, b2);
  ck_assert_ptr_eq(c1, c2);
  ck_assert_ptr_eq(d1, d2);



#test sscanf_hard1
  int a1 = 0, a2 = 5, a3 = 3, a4 = 9;
  int32_t n1 = 500, n2 = 10000, n3, n4;

  const char str[] = "123123SkipMePlease!!!!123";
  const char fstr[] = "%dSkipMePlease!!!!%d %n%n";

  int16_t res1 = s21_sscanf(str, fstr, &a1, &a3, &n1, &n3);
  int16_t res2 = sscanf(str, fstr, &a2, &a4, &n2, &n4);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(n1, n2);
  ck_assert_int_eq(a3, a4);
  ck_assert_int_eq(n1, n2);
  ck_assert_int_eq(n3, n4);



#test sscanf_buff3
  int32_t a1, a2;
  int32_t b1 = 0, b2 = 0;
  const char str[] = "12keppa12";
  const char fstr[] = "%dkeppapos%d";
  int32_t res1 = s21_sscanf(str, fstr, &a1, &b1);
  int32_t res2 = sscanf(str, fstr, &a2, &b2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);



#test sscanf_perc1
  int32_t a1, a2;
  int32_t b1 = 80, b2 = 33;
  int32_t c1 = 55, c2 = 33;
  const char str[] = "12 % 13 % 14";
  const char fstr[] = "%d %% %d %% %d";
  int32_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1);
  int32_t res2 = sscanf(str, fstr, &a2, &b2, &c2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);



#test sscanf_perc2
  int32_t a1, a2;
  int32_t b1 = 80, b2 = 33;
  int32_t c1 = 55, c2 = 33;
  const char str[] = "12%13%14";
  const char fstr[] = "%d%%%d%%%d";
  int32_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1);
  int32_t res2 = sscanf(str, fstr, &a2, &b2, &c2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);



#test sscanf_perc3
  int32_t a1 = 1234, a2 = 33333;

  const char str[] = "%%%16";
  const char fstr[] = "%%%%%%%d";
  int32_t res1 = s21_sscanf(str, fstr, &a1);
  int32_t res2 = sscanf(str, fstr, &a2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);



#test sscanf_perc4
  const char str[] = "%%%";
  const char fstr[] = "%%%%%%";
  int32_t res1 = s21_sscanf(str, fstr);
  int32_t res2 = sscanf(str, fstr);

  ck_assert_int_eq(res1, res2);



#test sscanf_perc5
  int32_t a1 = 1234, a2 = 33333;
  int32_t b1 = 1234, b2 = 33333;

  const char str[] = "%%123%888";
  const char fstr[] = "%%%%%d%%%d";
  int32_t res1 = s21_sscanf(str, fstr, &a1, &b1);
  int32_t res2 = sscanf(str, fstr, &a2, &b2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);



#test sscanf_mixed_ptrs1
  int *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;

  const char str[] = "0xFFFF 0xAAA 7123 0xBBC1FF";
  const char fstr[] = "%p %p %p %p";

  int32_t res1 = s21_sscanf(str, fstr, (void **)&a1, (void **)&b1, (void **)&c1,
                            (void **)&d1);
  int32_t res2 =
      sscanf(str, fstr, (void **)&a2, (void **)&b2, (void **)&c2, (void **)&d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(a1, a2);
  ck_assert_ptr_eq(b1, b2);
  ck_assert_ptr_eq(c1, c2);
  ck_assert_ptr_eq(d1, d2);



#test sscanf_mixed_ptrs2
  char *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;

  const char str[] = "0x4 0x3 0x2 0x1";
  const char fstr[] = "%p %p %p %p";

  int32_t res1 = s21_sscanf(str, fstr, (void **)&a1, (void **)&b1, (void **)&c1,
                            (void **)&d1);
  int32_t res2 =
      sscanf(str, fstr, (void **)&a2, (void **)&b2, (void **)&c2, (void **)&d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(a1, a2);
  ck_assert_ptr_eq(b1, b2);
  ck_assert_ptr_eq(c1, c2);
  ck_assert_ptr_eq(d1, d2);



#test sscanf_mixed_ptrs3
  int *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;

  const char str[] = "03033 0333 0123 0123 0x123 0xFFFFF 0xBBC1FF";
  const char fstr[] = "%p %p %p %p";

  int32_t res1 = s21_sscanf(str, fstr, (void **)&a1, (void **)&b1, (void **)&c1,
                            (void **)&d1);
  int32_t res2 =
      sscanf(str, fstr, (void **)&a2, (void **)&b2, (void **)&c2, (void **)&d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(a1, a2);
  ck_assert_ptr_eq(b1, b2);
  ck_assert_ptr_eq(c1, c2);
  ck_assert_ptr_eq(d1, d2);



#test sscanf_mixed_ptrs4
  int *a1 = 0, *a2 = 0, *b1 = 0, *b2 = 0, *c1 = 0, *c2 = 0, *d1 = 0, *d2 = 0;

  const char str[] = "0xABCDEF 0xAAA 7123 0xBBC1FF";
  const char fstr[] = "%p %p %p %p";

  int32_t res1 = s21_sscanf(str, fstr, (void **)&a1, (void **)&b1, (void **)&c1,
                            (void **)&d1);
  int32_t res2 =
      sscanf(str, fstr, (void **)&a2, (void **)&b2, (void **)&c2, (void **)&d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_ptr_eq(a1, a2);
  ck_assert_ptr_eq(b1, b2);
  ck_assert_ptr_eq(c1, c2);
  ck_assert_ptr_eq(d1, d2);



#test sscanf_hard3
  char a1, a2;
  char b1[256] = {'\0'};
  char b2[256] = {'\0'};
  float c1, c2;
  short int d1, d2;
  long int e1, e2;

  const char str[] = "$AmIIn%%sane? %\n\n\n \n \n \n\t   InF 0 %FIN9D-ME%";
  const char fstr[] = "%c%5s%%%*s %%  %G %hi %%FIN%ldDME%%";

  int32_t res1 = s21_sscanf(str, fstr, &a1, b1, &c1, &d1, &e1);
  int32_t res2 = sscanf(str, fstr, &a2, b2, &c2, &d2, &e2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_str_eq(b1, b2);
  ck_assert_float_infinite(c1);
  ck_assert_float_infinite(c2);
  ck_assert_int_eq(d1, d2);
  ck_assert_int_eq(e1, e2);



#test sscanf_hard4
  char a1, a2;
  char b1, b2;
  char c1, c2;
  char d1, d2;

  const char str[] = "%%$Char!StressssT%%estus!&&&";
  const char fstr[] = "%% %*c%*c%*c%*c%*c %c %c %c %c ### %*c";

  int32_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int32_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);
  ck_assert_int_eq(d1, d2);



#test sscanf_hard5
  char a1, a2;
  char b1, b2;
  char c1, c2;
  char d1, d2;
  const char str[] =
      "%%$Char!StressssVIm User Aboba %% %%% %%% %% % % %% % "
      "% % %% % % %% %T%%estus!%%&&&";
  const char fstr[] =
      "%% %*c%*c%*c%*c%*c %c %c %c %c %% %% %% %% %% %% %% "
      "%% %% %% %% %% %% %% %% %% ### %*c";

  int32_t res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
  int32_t res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

  ck_assert_int_eq(res1, res2);
  ck_assert_int_eq(a1, a2);
  ck_assert_int_eq(b1, b2);
  ck_assert_int_eq(c1, c2);

